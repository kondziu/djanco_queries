string,commit_id,hash,committer_id,author_id,parent_ids,parent_count,author_timestamp,committer_timestamp,changed_paths,changed_path_count,message,message_length
"https://github.com/apache/airflow.git",14076,5c08d1c70e0d5588578ddaf8dbed850c4b1aa5b8,514,514,"14068",1,1379705331,1380738951,"1927 1936",2,"Rename and remove some token deletion config flags.
",52
"https://github.com/apache/airflow.git",16682,bc7b92a6438cf374922d551d38a8567158976359,514,514,"16679",1,1406086925,1406163256,"3868 4933 4081",3,"Experiment: remove `unknownItem` flag

Simplifies loading unknown packages/releases.
",85
"https://github.com/apache/airflow.git",22098,af288acfbb867d94c03ca47fa33c06e0288b3313,426,426,"22099",1,1435719369,1435719369,"3916 6947 6945",3,"Move tool-specific Babel feature flags into a single module.
",61
"https://github.com/apache/airflow.git",26348,d278a3ff8b2863afb9ab7807e42d31f33c84eb78,117,917,"26349",1,1558023156,1558023156,"8016 7483 7057 7144 7060 7059 7356 9234 8019 9345 7065 7056 7086 8508 8238 7058 8558 9373 8018 8386 7840 8173 7993",23,"`act()` - s / flushPassiveEffects / Scheduler.unstable_flushWithoutYielding (#15591)

* s/flushPassiveEffects/unstable_flushWithoutYielding

a first crack at flushing the scheduler manually from inside act(). uses unstable_flushWithoutYielding(). The tests that changed, mostly replaced toFlushAndYield(...) with toHaveYielded(). For some tests that tested the state of the tree before flushing effects (but still after updates), I replaced act() with bacthedUpdates().

* ugh lint

* pass build, flushPassiveEffects returns nothing now

* pass test-fire

* flush all work (not just effects), add a compatibility mode

of note, unstable_flushWithoutYielding now returns a boolean much like flushPassiveEffects

* umd build for scheduler/unstable_mock, pass the fixture with it

* add a comment to Shcduler.umd.js for why we're exporting unstable_flushWithoutYielding

* run testsutilsact tests in both sync/concurrent modes

* augh lint

* use a feature flag for the missing mock scheduler warning

I also tried writing a test for it, but couldn't get the scheduler to unmock. included the failing test.

* Update ReactTestUtilsAct-test.js

- pass the mock scheduler warning test,
- rewrite some tests to use Scheduler.yieldValue
- structure concurrent/legacy suites neatly

* pass failing tests in batchedmode-test

* fix pretty/lint/import errors

* pass test-build

* nit: pull .create(null) out of the act() call
",1456
"https://github.com/apache/airflow.git",26666,745baf2e061bdb7a07b511fa6fd8c1c5e8106313,117,800,"26668",1,1554663754,1554663754,"8333 9397 8386 7060 7058 7583 7059 9396 7088 7065 8321 7056 7057",13,"Provide new jsx transform target for reactjs/rfcs#107 (#15141)

* adding jsx function

* add more feature flag defaults

* flip ReactElement order back
",157
"https://github.com/apache/airflow.git",26711,3a44ccefeda8cfa19482c8a3a4480a83cae6c2ae,117,747,"26712",1,1554312978,1554312978,"7165 7144",2,"Fix feature flags react-dom/unstable-new-scheduler (#15309)

I forgot to account for the CommonJS builds. (I had this change in
my local checkout but accidentally didn't commit it.)",182
"https://github.com/apache/airflow.git",26721,4d5cb64aa2beacf982cf0e01628ddda6bd92014c,117,747,"26723",1,1554245347,1554245347,"7913 8008 7496 7200 9395 7537 9348 7684 7144 8263 9396 7329 7201 7236 7533 7985 7184 7980 7190 8265 8194 7841 7165 7569 9398 8019 7733 8575 9397 8703 7969 9371 8197 9019 9391 7456 9394",36,"Rewrite ReactFiberScheduler for better integration with Scheduler package (#15151)

* Rewrite ReactFiberScheduler

Adds a new implementation of ReactFiberScheduler behind a feature flag.
We will maintain both implementations in parallel until the new one
is proven stable enough to replace the old one.

The main difference between the implementations is that the new one is
integrated with the Scheduler package's priority levels.

* Conditionally add fields to FiberRoot

Some fields only used by the old scheduler, and some by the new.

* Add separate build that enables new scheduler

* Re-enable skipped test

If synchronous updates are scheduled by a passive effect, that work
should be flushed synchronously, even if flushPassiveEffects is
called inside batchedUpdates.

* Passive effects have same priority as render

* Revert ability to cancel the current callback

React doesn't need this anyway because it never schedules callbacks if
it's already rendering.

* Revert change to FiberDebugPerf

Turns out this isn't neccessary.

* Fix ReactFiberScheduler dead code elimination

Should initialize to nothing, then assign the exports conditionally,
instead of initializing to the old exports and then reassigning to the
new ones.

* Don't yield before commit during sync error retry

* Call Scheduler.flushAll unconditionally in tests

Instead of wrapping in enableNewScheduler flag.
",1436
"https://github.com/apache/airflow.git",26825,b1a56abd6aec4379c2fc9400b413f6f42d0c9b1f,747,747,"26828",1,1553124513,1553124513,"7065 7236 7058 7060 7980 7974 9392 7056 9348 7959 7982 7059 9395 25 7981 7057 9390 8386 7969",19,"Fork ReactFiberScheduler with feature flag

Adds a feature flag `enableNewScheduler` that toggles between two
implementations of ReactFiberScheduler. This will let us land changes in
master while preserving the ability to quickly rollback.

Ideally this will be a short-lived fork. Once we've tested the new
scheduler for a week or so without issues, we will get rid of it. Until
then, we'll need to maintain two parallel implementations and run tests
against both of them. We rarely land changes to ReactFiberScheduler, so
I don't expect this will be a huge burden.

This commit does not implement anything new. The flag is still off and
tests run against the existing implementation.

Use `yarn test-new-scheduler` to run tests against the new one.
",751
"https://github.com/apache/airflow.git",26875,4162f6026c2f560f286e7853f4929cd5e0135bdd,117,1039,"26878",1,1552690462,1552690462,"7065 8386 9348 7058 7056 7999 7060 7059 7057",9,"Add feature flag to disable yielding (#15119)

",47
"https://github.com/apache/airflow.git",27046,870214f37ad63333e750f31ef0cc0bde5793aee5,117,864,"27056",1,1551135639,1551135639,"7065 7060 8386 8032 7080 8534 7058 7059 8225 8034 7057 7056 8536",13,"Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps (#14912)

* Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps

* Using a feature flag for the setNativeProps warning

* Removing extra line breaks

* Set the FB native feature flag to true

* Prettier
",296
"https://github.com/apache/airflow.git",27142,f3a14951ab9bccfd59ca977493b72321b24e50a5,117,1039,"27144",1,1549949144,1549949144,"7147 9472 8753 9471 7137 8295 9473 9468 9348 7959 9470 7981 7960 7090 7980 7089 8310 7964 7975 9469 8264 9224 9467 7845",24,"Partial Hydration (#14717)

* Basic partial hydration test

* Render comments around Suspense components

We need this to be able to identify how far to skip ahead if we're not
going to hydrate this subtree yet.

* Add DehydratedSuspenseComponent type of work

Will be used for Suspense boundaries that are left with their server
rendered content intact.

* Add comment node as hydratable instance type as placeholder for suspense

* Skip past nodes within the Suspense boundary

This lets us continue hydrating sibling nodes.

* A dehydrated suspense boundary comment should be considered a sibling

* Retry hydrating at offscreen pri or after ping if suspended

* Enter hydration state when retrying dehydrated suspense boundary

* Delete all children within a dehydrated suspense boundary when it's deleted

* Delete server rendered content when props change before hydration completes

* Make test internal

* Wrap in act

* Change SSR Fixture to use Partial Hydration

This requires the enableSuspenseServerRenderer flag to be manually enabled
for the build to work.

* Changes to any parent Context forces clearing dehydrated content

We mark dehydrated boundaries as having child work, since they might have
components that read from the changed context.

We check this in beginWork and if it does we treat it as if the input
has changed (same as if props changes).

* Wrap in feature flag

* Treat Suspense boundaries without fallbacks as if not-boundaries

These don't come into play for purposes of hydration.

* Fix clearing of nested suspense boundaries

* ping -> retry

Co-Authored-By: sebmarkbage <sebastian@calyptus.eu>

* Typo

Co-Authored-By: sebmarkbage <sebastian@calyptus.eu>

* Use didReceiveUpdate instead of manually comparing props

* Leave comment for why it's ok to ignore the timeout
",1876
"https://github.com/apache/airflow.git",27240,6cb26774e27e03c7d5d6e4601bcee979a004fe91,117,953,"27244",1,1548278889,1548278889,"7184 7840 7190 7091 7844 7059 7060 8199 8019 9475 7991 7981 7057 7058 9477 9476 9474 9348 7862 7841 7065 8015 8428 7974 8197 7104 8386 7090 8215 7088 7056",27,"Enable hooks! (#14679)

* Turned enableHooks feature flag on everywhere
* Removed useHooks feature flag from tests (now that it's on by default)
* Remove useHooks feature flag entirely
",188
"https://github.com/apache/airflow.git",27357,8bfef0da5578f7518afec4d9277100f1db45132c,747,747,"27358",1,1545094238,1545094238,"7065 7058",2,"Make scheduler debugging feature flag static
",45
"https://github.com/apache/airflow.git",27359,535804f5c822e12bd6d89ad0081d45355e01cea3,117,953,"27363",1,1544802886,1544802886,"9495 7165 8032 9496 8223",3,"Removed Fabric-specific feature flag files and updated Rollup to use the (non-Fabric) React Native flag files. (#14437)

",121
"https://github.com/apache/airflow.git",27363,2743fb7b23a5af42059a9b07c5f6048f941709d9,117,953,"27364",1,1544736023,1544736023,"9340 7059",2,"Enable hooks by default for FB React Native renderer (#14435)

* Enable hooks by default for FB React Native renderer
* Updated RN+FB feature flags to make some of the dynamic ones static
",190
"https://github.com/apache/airflow.git",27371,8df4d59be532e56b6513815184094f57f566df09,747,1082,"27372",1,1544133443,1544133443,"7056 7060 8640 7058 7059 7201 9495 8386 8622 7057 8508 7573 8638 7065 9496 9228",15,"Implement pauseExecution, continueExecution, dumpQueue for Scheduler (#14053)

* Implement pauseExecution, continueExecution, dumpQueue

* Expose firstCallbackNode. Fix tests. Revert results.json

* Put scheduler pausing behind a feature flag
",248
"https://github.com/apache/airflow.git",27448,21d5f7d32d5becf5c8e986ff0202059be643dc15,117,747,"27450",1,1542317812,1542317812,"7177 7065 7058 8386 7056 7059 9496 8542 9495 8190 7057",11,"Wrap shorthand CSS property collision warning in feature flag (#14245)

Disables the recently introduced (#14181) warning for shorthand
CSS property collisions by wrapping in a feature flag. Let's hold off
shipping this until at least the next minor.",252
"https://github.com/apache/airflow.git",27541,0a0f503d57d54c028639a5c052c658275d25e706,117,747,"27543",1,1541468934,1541468934,"7065",1,"Enable hooks in www build (#14116)

The `enableHooks` feature flag used to only control whether the API
was exposed on the React package. But now it also determines if the
dispatcher and implementation are included in the bundle.

We're using hooks in www, so I've switched the feature flag to `true`
in the www build.

(Alternatively, we could have two feature flags: one for the
implementation and dispatcher, and one for exposing the API on the
React package.)",472
"https://github.com/apache/airflow.git",27593,bf9fadfcf42847fa89f9a76c7d4dc2e2c17ee020,117,747,"27602",1,1540934060,1540934060,"8386 7060 7056 7065 7058 7059 9496 7974 7981 7091 7840 7057 9495",13,"[Hooks] Remove dispatch callbacks (#14037)

Removes the `enableDispatchCallback` feature flag and deletes the
associated code. An earlier version of the Hooks proposal included this
feature but we've since decided to remove it.",229
"https://github.com/apache/airflow.git",27618,933b64710a48b2f86f71b1507901038025e79e3f,747,1107,"27620",1,1540072900,1540837614,"8386 7065 7057 7059 7060 8019 7056 9496 7974 9495 7058",11,"Disable hook update callback (2nd arg to setState/dispatch)

I put the feature behind a feature flag, along with a warning, so
we can phase it out in www.
",155
"https://github.com/apache/airflow.git",27660,105f2de545dc9e374ed4ac55b3628eeeb555f4a6,747,1107,"27664",1,1536193213,1540837613,"7088 8386 9496 7058 7060 8019 7065 7056 7057 7991 7059 9495",12,"Put hooks behind feature flag
",30
"https://github.com/apache/airflow.git",27679,275e76e83bc2be5dc0be9185ff747f383969289a,117,953,"27680",1,1540413907,1540413907,"7231 7060 7056 7057 7065 8386 9496 7059 7088 7058 9495",11,"Enable stable concurrent APIs flag for 16.7 alpha (#13928)

* Add enableStableConcurrentModeAPIs feature flag

* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag
",195
"https://github.com/apache/airflow.git",27908,806eebdaeec5a5b0e4e5df799bd98eb5f288bba5,117,953,"27910",1,1538165101,1538165101,"8579 7959 7058 7057 7496 9348 8701 9495 8386 7059 7980 7184 7060 7982 7329 7056 8201 7065 8629 7485 7862 9496 8014 8636 8010",25,"Enable getDerivedStateFromError (#13746)

* Removed the enableGetDerivedStateFromCatch feature flag (aka permanently enabled the feature)
* Forked/copied ReactErrorBoundaries to ReactLegacyErrorBoundaries for testing componentDidCatch
* Updated error boundaries tests to apply to getDerivedStateFromCatch
* Renamed getDerivedStateFromCatch -> getDerivedStateFromError
* Warn if boundary with only componentDidCatch swallows error
* Fixed a subtle reconciliation bug with render phase error boundary",503
"https://github.com/apache/airflow.git",28006,a079011f95033758c17f1d7c2ee44d9cc80623f2,742,942,"28007",1,1536776963,1536776963,"7997 9312 7065 9496 8025 9249 7058 7241 7056 7059 9495 8386 8024 7919 9313 7057",16,"🔥 Stop syncing the value attribute on inputs (behind a feature flag) (#13526)

* :fire: Stop syncing the value attribute on inputs

* Eliminate some additional checks

* Remove initialValue and initialWrapper from wrapperState flow type

* Update tests with new sync logic, reduce some operations

* Update tests, add some caveats for SSR mismatches

* Revert newline change

* Remove unused type

* Call toString to safely type string values

* Add disableInputAttributeSyncing feature flag

Reverts tests to original state, adds attribute sync feature flag,
then moves all affected tests to ReactFire-test.js.

* Revert position of types in toStringValues

* Invert flag on number input blur

* Add clarification why double blur is necessary

* Update ReactFire number cases to be more explicite about blur

* Move comments to reduce diff size

* Add comments to clarify behavior in each branch

* There is no need to assign a different checked behavior in Fire

* Use checked reference

* Format

* Avoid precomputing stringable values

* Revert getToStringValue comment

* Revert placement of undefined in getToStringValue

* Do not eagerly stringify value

* Unify Fire test cases with normal ones

* Revert toString change. Only assign unsynced values when not nully
",1326
"https://github.com/apache/airflow.git",28007,a7bd7c3c0480c96e32d9518bb707172dfc72db58,117,742,"28011",1,1536767764,1536767764,"9657 7058 8699",3,"Allow reading default feature flags from bundle tests (#13629)

",64
"https://github.com/apache/airflow.git",28011,7204b636ee2b46608811b11111a6cb4e544a8276,117,742,"28012",1,1536765456,1536765456,"9249 9254 25 9371",4,"Run tests for Fire feature flags (#13628)

* Run tests for Fire feature flags

* Only run ReactDOM tests for Fire
",117
"https://github.com/apache/airflow.git",28099,34348a45b4b1de40d285ba7168e4d6770e620911,1039,1094,"28100",1,1536185099,1536185099,"7060 7058 9496 9495 9583 7056 7065 7059 7057 7090 8386",11,"Add enableSuspenseServerRenderer feature flag (#13573)

",56
"https://github.com/apache/airflow.git",28168,6e4f7c788603dac7fccd227a4852c110b072fe16,117,953,"28169",1,1535507891,1535507891,"8017 7058 7329 7144 7969 9348 9409 9585 7981 9416 9414 9428 7443 7979",14,"Profiler integration with interaction-tracking package (#13253)

* Updated suspense fixture to use new interaction-tracking API

* Integrated Profiler API with interaction-tracking API (and added tests)

* Pass interaction Set (rather than Array) to Profiler onRender callback

* Removed some :any casts for enableInteractionTracking fields in FiberRoot type

* Refactored threadID calculation into a helper method

* Errors thrown by interaction tracking hooks use unhandledError to rethrow more safely.
Reverted try/finally change to ReactTestRendererScheduling

* Added a $FlowFixMe above the FiberRoot :any cast

* Reduce overhead from calling work-started hook

* Remove interaction-tracking wrap() references from unwind work in favor of managing suspense/interaction continuations in the scheduler
* Moved the logic for calling work-started hook from performWorkOnRoot() to renderRoot()

* Add interaction-tracking to bundle externals. Set feature flag to __PROFILE__

* Renamed the freezeInteractionCount flag and replaced one use-case with a method param

* let -> const

* Updated suspense fixture to handle recent API changes
",1164
"https://github.com/apache/airflow.git",28222,0da5102cf02890a4e006f4d949ae4fbf2bfd85af,117,953,"28223",1,1534538718,1534538718,"7057 9782 9779 9781 8386 7065 7058 9788 7060 9787 7056 7443 7144 9496 7059 9495 9780",17,"Add interaction-tracking/subscriptions (#13426)

* Removed enableInteractionTrackingObserver as a separate flag; only enableInteractionTracking is used now

* Added interaction-tracking/subscriptions bundle and split tests

* Added multi-subscriber support

* Moved subscriptions behind feature flag

* Fixed bug with wrap() parameters and added test

* Replaced wrap arrow function
",394
"https://github.com/apache/airflow.git",28297,067cc24f55ef01a233be9e7564b337e35fed72ea,117,953,"28298",1,1533746573,1533746573,"7960 7980 7979 7329 7959 9348 7962",7,"Profiler actualDuration bugfix (#13313)

* Simplified profiler actualDuration timing

While testing the new DevTools profiler, I noticed that sometimes– in larger, more complicated applications– the actualDuration value was incorrect (either too large, or sometimes negative). I was not able to reproduce this in a smaller application or test (which sucks) but I assume it has something to do with the way I was tracking render times across priorities/roots. So this PR replaces the previous approach with a simpler one.

* Changed bubbling logic after chatting out of band with Andrew

* Replaced __PROFILE__ with feature-flag conditionals in test

* Updated test comment
",686
"https://github.com/apache/airflow.git",28657,392530104c00c25074ce38e1f7e1dd363018c7ce,117,1175,"28659",1,1528759867,1528759867,"8010 9496 7057 7059 7058 7065 7982 7056 8386 9495",10,"Remove feature flag around 'getDerivedStateFromProps' bug fix (#13022)

**what is the change?:**
Basically undoes https://github.com/facebook/react/commit/4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6#diff-904ceabd8a1e9a07ab1d876d843d62e1

**why make this change?:**
We rolled out this fix internally and in open source weeks ago, and now
we're cleaning up.

**test plan:**
Ran tests and lint, and really we have been testing this because the
flag is open internally as of last week or so.

**issue:**
Internal task T29948812 has some info.",547
"https://github.com/apache/airflow.git",28758,13003654e79f9fa65ee833afeec86d668f35d31d,117,953,"28763",1,1526921362,1526921362,"7962 7979 7981 7329 9348",5,"Pass ""start time"" and ""commit time"" to Profiler callback (#12852)

* Added start time parameter to Profiler onRender callback
* Profiler also captures commit time
* Only init Profiler stateNode if enableProfilerTimer feature flag enabled",239
"https://github.com/apache/airflow.git",28808,2ace49362adc63bc0bedd5df363bf471adb71b94,117,953,"28809",1,1526510372,1526510372,"7997",1,"Removed duplicate feature flag in test (#12836)

",49
"https://github.com/apache/airflow.git",28816,de84d5c1079b12455058ee177fb3ff97cc0fb8d0,117,953,"28818",1,1526423206,1526423206,"7058 7056 8263",3,"Enable Profiler timing for DOM and RN dev bundles (#12823)

* Enable Profiler timing for DOM and RN dev bundles
* Disable enableProfilerTimer feature flag for ReactIncrementalPerf-test
",187
"https://github.com/apache/airflow.git",28876,4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6,117,1126,"28879",1,1526089500,1526089500,"7057 7058 9495 7059 8386 7056 9496 7982 7065 8010",10,"Put recent change to getDerivedStateFromProps behind a feature flag (#12788)

This will allow us to safely ship it at Facebook and get a better idea
for if/how it breaks existing product code.",193
"https://github.com/apache/airflow.git",28882,6565795377d1d2c79a7708766f1af9e1a87517de,117,1126,"28890",1,1526000950,1526000950,"9393 7980 9495 7969 7058 7065 7979 7120 7057 7236 7088 8386 8265 9496 7960 7959 9348 7982 7059 7913 9791 7184 7056 7981 7094",25,"Suspense (#12279)

* Timeout component

Adds Timeout component. If a promise is thrown from inside a Timeout component,
React will suspend the in-progress render from committing. When the promise
resolves, React will retry. If the render is suspended for longer than the
maximum threshold, the Timeout switches to a placeholder state.

The timeout threshold is defined as the minimum of:
- The expiration time of the current render
- The `ms` prop given to each Timeout component in the ancestor path of the
thrown promise.

* Add a test for nested fallbacks

Co-authored-by: Andrew Clark <acdlite@fb.com>

* Resume on promise rejection

React should resume rendering regardless of whether it resolves
or rejects.

* Wrap Suspense code in feature flag

* Children of a Timeout must be strict mode compatible

Async is not required for Suspense, but strict mode is.

* Simplify list of pending work

Some of this was added with ""soft expiration"" in mind, but now with our revised
model for how soft expiration will work, this isn't necessary.

It would be nice to remove more of this, but I think the list itself is inherent
because we need a way to track the start times, for <Timeout ms={ms} />.

* Only use the Timeout update queue to store promises, not for state

It already worked this way in practice.

* Wrap more Suspense-only paths in the feature flag

* Attach promise listener immediately on suspend

Instead of waiting for commit phase.

* Infer approximate start time using expiration time

* Remove list of pending priority levels

We can replicate almost all the functionality by tracking just five
separate levels: the highest/lowest priority pending levels, the
highest/lowest priority suspended levels, and the lowest pinged level.

We lose a bit of granularity, in that if there are multiple levels of
pending updates, only the first and last ones are known. But in practice
this likely isn't a big deal.

These heuristics are almost entirely isolated to a single module and
can be adjusted later, without API changes, if necessary.

Non-IO-bound work is not affected at all.

* ReactFiberPendingWork -> ReactFiberPendingPriority

* Renaming method names from ""pending work"" to ""pending priority""

* Get rid of SuspenseThenable module

Idk why I thought this was neccessary

* Nits based on Sebastian's feedback

* More naming nits + comments

* Add test for hiding a suspended tree to unblock

* Revert change to expiration time rounding

This means you have to account for the start time approximation
heuristic when writing Suspense tests, but that's going to be
true regardless.

When updating the tests, I also made a fix related to offscreen
priority. We should never timeout inside a hidden tree.

* palceholder -> placeholder
",2839
"https://github.com/apache/airflow.git",28895,fc3777b1fe295fd2661f1974f5587d214791f04b,117,953,"28897",1,1525991132,1525991132,"7094 7088 7981 7980 7058 8386 7827 7057 8265 8239 7065 7959 7090 7329 7565 9496 7979 7452 9495 7955 7962 7059 7960 7120 9791 7056 8451 9585 8263 9348 7484",31,"Add Profiler component for collecting new render timing info (#12745)

Add a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.

Most of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).",604
"https://github.com/apache/airflow.git",28897,a9abd27e4f5aa1e68bd6035be901299327279ee2,117,1175,"28908",1,1525904893,1525904893,"9758 9753 7065",3,"[schedule] Support multiple callbacks in scheduler (#12746)

* Support using id to cancel scheduled callback

**what is the change?:**
see title

**why make this change?:**
Once we support multiple callbacks you will need to use the id to
specify which callback you mean.

**test plan:**
Added a test, ran all tests, lint, etc.

* ran prettier

* fix lint

* Use object for storing callback info in scheduler

* Wrap initial test in a describe block

* Support multiple callbacks in `ReactScheduler`

**what is the change?:**
We keep a queue of callbacks instead of just one at a time, and call
them in order first by their timeoutTime and then by the order which
they were scheduled in.

**why make this change?:**
We plan on using this module to coordinate JS outside of React, so we
will need to schedule more than one callback at a time.

**test plan:**
Added a boatload of shiny new tests. :)

Plus ran all the old ones.

NOTE: The tests do not yet cover the vital logic of callbacks timing
out, and later commits will add the missing test coverage.

* Heuristic to avoid looking for timed out callbacks when none timed out

**what is the change?:**
Tracks the current soonest timeOut time for all scheduled callbacks.

**why make this change?:**
We were checking every scheduled callback to see if it timed out on
every tick. It's more efficient to skip that O(n) check if we know that
none have timed out.

**test plan:**
Ran existing tests.

Will write new tests to cover timeout behavior in more detail soon.

* Put multiple callback support under a disabled feature flag

**what is the change?:**
See title

**why make this change?:**
We don't have error handling in place yet, so should maintain the old
behavior until that is in place.

But want to get this far to continue making incremental changes.

**test plan:**
Updated and ran tests.

* Hide support for multiple callbacks under a feature flag

**what is the change?:**
see title

**why make this change?:**
We haven't added error handling yet, so should not expose this feature.

**test plan:**
Ran all tests, temporarily split out the tests for multiple callbacks
into separate file. Will recombine once we remove the flag.

* Fix nits from code review

See comments on https://github.com/facebook/react/pull/12743

* update checklist in comments

* Remove nested loop which calls additional timed out callbacks

**what is the change?:**
We used to re-run any callbacks which time out whilst other callbacks
are running, but now we will only check once for timed out callbacks
then then run them.

**why make this change?:**
To simplify the code and the behavior of this module.

**test plan:**
Ran all existing tests.

* Remove feature flag

**what is the change?:**
see title

**why make this change?:**
Because only React is using this, and it sounds like async. rendering
won't hit any different behavior due to these changes.

**test plan:**
Existing tests pass, and this allowed us to recombine all tests to run
in both 'test' and 'test-build' modes.

* remove outdated file

* fix typo
",3179
"https://github.com/apache/airflow.git",28934,ec57d2994156ba5fcf794100968764bf25206629,742,948,"28935",1,1524764351,1524764351,"7997 7995",2,"Remove redundant feature flag in the test due to https://github.com/facebook/react/pull/12117 (#12696)

",104
"https://github.com/apache/airflow.git",28940,1e3cd332a015e312149efa36eb81c7523411cc2d,117,1175,"28941",1,1524522346,1524522346,"9860 9758 9753 7997 7058 7065 7057 7685 9496 9495 7995 7056 7059 7999 8386",15,"Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag (#12648)

* Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag

**what is the change?:**
Removes the feature flag 'alwaysUseRequestIdleCallbackPolyfill', such
that we **always** use the polyfill for requestIdleCallback.

**why make this change?:**
We have been testing this feature flag at 100%% for some time internally,
and determined it works better for React than the native implementation.
Looks like RN was overriding the flag to use the native when possible,
but since no RN products are using 'async' mode it should be safe to
switch this flag over for RN as well.

**test plan:**
We have already been testing this internally for some time.

**issue:**
internal task t28128480

* fix mistaken conditional

* Add mocking of rAF, postMessage, and initial test for ReactScheduler

**what is the change?:**
- In all tests where we previously mocked rIC or relied on native
mocking which no longer works, we are now mocking rAF and postMessage.
- Also adds a basic initial test for ReactScheduler.
NOTE -> we do plan to write headless browser tests for ReactScheduler!
This is just an initial test, to verify that it works with the mocked
out browser APIs as expected.

**why make this change?:**
We need to mock out the browser APIs more completely for the new
'ReactScheduler' to work in our tests. Many tests are depending on it,
since it's used at a low level.

By mocking the browser APIs rather than the 'react-scheduler' module, we
enable testing the production bundles. This approach is trading
isolation for accuracy. These tests will be closer to a real use.

**test plan:**
run the tests :)

**issue:**
internal task T28128480
",1761
"https://github.com/apache/airflow.git",28960,0887c7d56cb9b83f36dcb490b4245d7bc33bda1f,117,953,"28961",1,1524082610,1524082610,"9496 9896 7059 7144 8408 7112 9894 7541 7557 7560 7165 9340 8032 8223 7056 9495 9895",14,"Fork React Native renderer into FB and OSS bundles (#12625)

* Added new ""native-fb"" and ""native-fabric-fb"" bundles.
* Split RN_DEV and RN_PROD bundle types into RN_OSS_DEV, RN_OSS_PROD, RN_FB_DEV, and RN_FB_PROD. (This is a bit redundant but it seemed the least intrusive way of supporting a forked feature flags file for these bundles.)
* Renamed FB_DEV and FB_PROD bundle types to be more explicitly for www (FB_WWW_DEV and FB_WWW_PROD)
* Removed Haste @providesModule headers from the RB-specific RN renderer bundles to avoid a duplicate name conflicts.
* Remove dynamic values from OSS RN feature flags. (Leave them in FB RN feature flags.)
* Updated the sync script(s) to account for new renderer type.
* Move ReactFeatureFlags.js shim to FB bundle only (since OSS bundle no longer needs dynamic values).",816
"https://github.com/apache/airflow.git",29224,94518b068bf52196abea0c83f4c9926bfe2065c6,117,1126,"29225",1,1519436322,1519436322,"8010 7058 7944 7236 9790 7243 7959 8263 7878 7969 7455 9922 9794 8386 7982 9348 8579 7538 9894 7862 7496 8011 9795 9891 7947 9896 7943 7980 7065 7993 8703 7960 7963 8629 8701 7233 7981 9697 8265 9923 7968 8791",39,"Add stack unwinding phase for handling errors (#12201)

* Add stack unwinding phase for handling errors

A rewrite of error handling, with semantics that more closely match
stack unwinding.

Errors that are thrown during the render phase unwind to the nearest
error boundary, like before. But rather than synchronously unmount the
children before retrying, we restart the failed subtree within the same
render phase. The failed children are still unmounted (as if all their
keys changed) but without an extra commit.

Commit phase errors are different. They work by scheduling an error on
the update queue of the error boundary. When we enter the render phase,
the error is popped off the queue. The rest of the algorithm is
the same.

This approach is designed to work for throwing non-errors, too, though
that feature is not implemented yet.

* Add experimental getDerivedStateFromCatch lifecycle

Fires during the render phase, so you can recover from an error within the same
pass. This aligns error boundaries more closely with try-catch semantics.

Let's keep this behind a feature flag until a future release. For now, the
recommendation is to keep using componentDidCatch. Eventually, the advice will
be to use getDerivedStateFromCatch for handling errors and componentDidCatch
only for logging.

* Reconcile twice to remount failed children, instead of using a boolean

* Handle effect immediately after its thrown

This way we don't have to store the thrown values on the effect list.

* ReactFiberIncompleteWork -> ReactFiberUnwindWork

* Remove startTime

* Remove TypeOfException

We don't need it yet. We'll reconsider once we add another exception type.

* Move replay to outer catch block

This moves it out of the hot path.
",1787
"https://github.com/apache/airflow.git",29275,49b0ca1b836751ae78fd191286b9eb3bf2be385b,117,786,"29276",1,1518125297,1518125297,"7165 9389",2,"Fix finding Fabric feature flags (#12189)

Test Plan: yarn build fabric, inspect build/react-native/ReactFabric-dev.js to see enablePersistentReconciler = true.",160
"https://github.com/apache/airflow.git",29318,d3b183c32326cacc29efea43ca9300a17ed4aca0,117,953,"29319",1,1516919453,1516919453,"7058 7503 8002 7993 8011 9957 7990 9896 9875 9795 7991 8004 7982 8791 8010 9891 7998 7959 7994 7488 8005 9894 7496 7065 9958 7234",18,"Debug render-phase side effects in ""strict"" mode (#12094)

A new feature flag has been added, debugRenderPhaseSideEffectsForStrictMode. When enabled, StrictMode subtrees will also double-invoke lifecycles in the same way as debugRenderPhaseSideEffects.

By default, this flag is enabled for __DEV__ only. Internally we can toggle it with a GK.

This breaks several of our incremental tests which make use of the noop-renderer. Updating the tests to account for the double-rendering in development mode makes them significantly more complicated. The most straight forward fix for this will be to convert them to be run as internal tests only. I believe this is reasonable since we are the only people making use of the noop renderer.",736
"https://github.com/apache/airflow.git",29320,87ae211ccd8d61796cfdef138d1e12fb7a74f85d,117,1126,"29323",1,1516851382,1516851382,"7103 9896 7090 71 9791 7959 7805 8307 7913 7975 25 9348 7960 7991 7058 7120 9848 9929 7065 7088 7979 9894",21,"New context API (#11818)

* New context API

Introduces a declarative context API that propagates updates even when
shouldComponentUpdate returns false.

* Fuzz tester for context

* Use ReactElement for provider and consumer children

* Unify more branches in createFiberFromElement

* Compare context values using Object.is

Same semantics as PureComponent/shallowEqual.

* Add support for Provider and Consumer to server-side renderer

* Store providers on global stack

Rather than using a linked list stored on the context type. The global
stack can be reset in case of an interruption or error, whereas with the
linked list implementation, you'd need to keep track of every
context type.

* Put new context API behind a feature flag

We'll enable this in www only for now.

* Store nearest provider on context object

* Handle reentrancy in server renderer

Context stack should be per server renderer instance.

* Bailout of consumer updates using bitmask

The context type defines an optional function that compares two context
values, returning a bitfield. A consumer may specify the bits it needs
for rendering. If a provider's context changes, and the consumer's bits
do not intersect with the changed bits, we can skip the consumer.

This is similar to how selectors are used in Redux but fast enough to do
while scanning the tree. The only user code involved is the function
that computes the changed bits. But that's only called once per provider
update, not for every consumer.

* Store current value and changed bits on context object

There are fewer providers than consumers, so better to do this work
at the provider.

* Use maximum of 31 bits for bitmask

This is the largest integer size in V8 on 32-bit systems. Warn in
development if too large a number is used.

* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer

* Inline Object.is

* Warn if multiple renderers concurrently render the same context provider

Let's see if we can get away with not supporting this for now. If it
turns out that it's needed, we can fall back to backtracking the
fiber return path.

* Nits that came up during review
",2215
"https://github.com/apache/airflow.git",29324,431dca925a9f76b683d2ea5ec4520149ad15ff81,117,953,"29325",1,1516835185,1516835185,"9983 7959 7982",3,"Update debugRenderPhaseSideEffects behavior (#12057)

Update debugRenderPhaseSideEffects behavior

This feature flag no longer double-invokes componentWillMount, componentWillReceiveProps, componentWillUpdate, or shouldComponentUpdate.

It continues to double-invoke the constructor, render, and setState updater functions as well as the recently added, static getDerivedStateFromProps method

Tests have been updated.",424
"https://github.com/apache/airflow.git",29333,97e2911508a2a7af6f50cf87ae503abe39842bef,117,953,"29334",1,1516383406,1516383406,"8004 7572 8029 9430 7090 8629 7453 7484 8535 9586 8263 8579 8701 9795 9957 9892 9916 8260 9894 7503 7994 7982 7646 7805 9984 7485 9983 8323 8428 8534 7570 9431 9923 7058 7959 7065 7234 8636",38,"RFC 6: Deprecate unsafe lifecycles (#12028)

* Added unsafe_* lifecycles and deprecation warnings
If the old lifecycle hooks (componentWillMount, componentWillUpdate, componentWillReceiveProps) are detected, these methods will be called and a deprecation warning will be logged. (In other words, we do not check for both the presence of the old and new lifecycles.) This commit is expected to fail tests.

* Ran lifecycle hook codemod over project
This should handle the bulk of the updates. I will manually update TypeScript and CoffeeScript tests with another commit.
The actual command run with this commit was: jscodeshift --parser=flow -t ../react-codemod/transforms/rename-unsafe-lifecycles.js ./packages/**/src/**/*.js

* Manually migrated CoffeeScript and TypeScript tests

* Added inline note to createReactClassIntegration-test
Explaining why lifecycles hooks have not been renamed in this test.

* Udated NativeMethodsMixin with new lifecycle hooks

* Added static getDerivedStateFromProps to ReactPartialRenderer
Also added a new set of tests focused on server side lifecycle hooks.

* Added getDerivedStateFromProps to shallow renderer
Also added warnings for several cases involving getDerivedStateFromProps() as well as the deprecated lifecycles.
Also added tests for the above.

* Dedupe and DEV-only deprecation warning in server renderer

* Renamed unsafe_* prefix to UNSAFE_* to be more noticeable

* Added getDerivedStateFromProps to ReactFiberClassComponent
Also updated class component and lifecyle tests to cover the added functionality.

* Warn about UNSAFE_componentWillRecieveProps misspelling

* Added tests to createReactClassIntegration for new lifecycles

* Added warning for stateless functional components with gDSFP

* Added createReactClass test for static gDSFP

* Moved lifecycle deprecation warnings behind (disabled) feature flag

Updated tests accordingly, by temporarily splitting tests that were specific to this feature-flag into their own, internal tests. This was the only way I knew of to interact with the feature flag without breaking our build/dist tests.

* Tidying up

* Tweaked warning message wording slightly
Replaced 'You may may have returned undefined.' with 'You may have returned undefined.'

* Replaced truthy partialState checks with != null

* Call getDerivedStateFromProps via .call(null) to prevent type access

* Move shallow-renderer didWarn* maps off the instance

* Only call getDerivedStateFromProps if props instance has changed

* Avoid creating new state object if not necessary

* Inject state as a param to callGetDerivedStateFromProps
This value will be either workInProgress.memoizedState (for updates) or instance.state (for initialization).

* Explicitly warn about uninitialized state before calling getDerivedStateFromProps.
And added some new tests for this change.

Also:
* Improved a couple of falsy null/undefined checks to more explicitly check for null or undefined.
* Made some small tweaks to ReactFiberClassComponent WRT when and how it reads instance.state and sets to null.

* Improved wording for deprecation lifecycle warnings

* Fix state-regression for module-pattern components
Also add support for new static getDerivedStateFromProps method
",3306
"https://github.com/apache/airflow.git",29706,dbf715c958ca43cbcf47d5e3c69e76d6123eb142,117,953,"29707",1,1511215553,1511215553,"10162 7144 10159",3,"Read debugRenderPhaseSideEffects from GK (#11603)

* Forked ReactFeatureFlags for React Native to enable debugRenderPhaseSideEffects GK
* Changed debugRenderPhaseSideEffects in www feature flags to be runtime as well
",219
"https://github.com/apache/airflow.git",29720,7f68544f0dabda3c27c775eb10067c97b49e313b,117,953,"29722",1,1510944594,1510944594,"10162 10164 9891 9348 7058 7982 10204 7959",8,"New feature flags to help detect unexpected lifecycle side effects (#11587)

Added `debugRenderPhaseSideEffects` feature flag to help detect unexpected side effects in pre-commit lifecycle hooks and `setState` reducers.",219
"https://github.com/apache/airflow.git",29826,96914c98dfbe684afcbc3285ca31736451e533fe,117,742,"29827",1,1509985063,1509985063,"10162",1,"Split static and dynamic www feature flags (#11471)

",53
"https://github.com/apache/airflow.git",29827,3b27160f82d9934f7ea9ddf064424634526702ca,117,742,"29829",1,1509984428,1509984428,"7981 10162 7058 7982 10164 7959 8446 7961 8264 9348",10,"Put perf integration behind a feature flag (#11455)

* Enable User Timing API integration with a feature flag

* Expose a way to toggle user timing flag in www

* Update ReactNativeCSFeatureFlags.js

* Update ReactFeatureFlags.js
",237
"https://github.com/apache/airflow.git",29833,46f7b0d9451c2ac6f5ec5efd2c12ba77a4e054d9,117,742,"29834",1,1509977688,1509977688,"7981 9389 7984 7088 7236 131 10164 10160 7058 10161 10163 10162 7982 7231 8275 7233 10214 7960",18,"Fix dead code elimination for feature flags (#11453)

* Fix dead code elimination for feature flags

Turning flags into named exports fixes dead code elimination.

This required some restructuring of how we verify that flag types match up. I used the Check<> trick combined with import typeof, as suggested by @calebmer.

For www, we can no longer re-export `require('ReactFeatureFlags')` directly, and instead destructure it. This means flags have to be known at init time. This is already the case so it's not a problem. In fact it may be better since it removes extra property access in tight paths.

For things that we *want* to be dynamic on www (currently, only performance flag) we can export a function to toggle it, and then put it on the secret exports. In fact this is better than just letting everyone mutate the flag at arbitrary times since we can provide, e.g., a ref counting interface to it.

* Record sizes
",936
"https://github.com/apache/airflow.git",29886,1e35f2b282a20b41000e6b048fa5a16e147d930b,1126,1279,"29888",1,1509661266,1509661266,"7058 10164 7685 7231",4,"Put createRoot export under a feature flag (#11426)

",53
"https://github.com/apache/airflow.git",29937,0e15ff5669271f5f5956e30a4fe1ae5963778e89,117,1279,"29940",1,1509497035,1509497035,"7088 10164 10189 8625 7793 7984 7058",7,"Put React.Fragment under a feature flag (#11421)

* Put React.Fragment under a feature flag

* Don't export undefined Fragment
",130
"https://github.com/apache/airflow.git",30174,dee604dbe287b34918073110c425078583f8fd9a,117,742,"30175",1,1508348452,1508348452,"7112 10950 10777 10652 7443",4,"Add static injection for feature flags (#11269)

* Replace ReactDOMFeatureFlags with ReactFeatureFlags

* Add static injection for feature flags
",148
"https://github.com/apache/airflow.git",30693,83393bc2be12dfcc449fd4c1d0bf86260215e76f,117,1126,"30694",1,1503597243,1503597243,"10777 10654",2,"Enable opt-in to async mode (#10535)

When the feature flag enableAsyncSubtreeAPI is true,
React.unstable_AsyncComponent creates an async subtree. When it's false,
it behaves like a normal, sync React component. We use this flag in www
as a fail safe so that if we ship an async bug, we can set the flag to
false and revert back to sync mode.

For open source, we should enable the feature flag.",401
"https://github.com/apache/airflow.git",30727,2999811b07a5eb9e04680457a0b56195abd7e08c,1175,942,"30730",1,1502812845,1502812844,"11583 10804 10710 10632 11696 10934 10725 10806 10696 10677 10797 10802 10659 10809 10848 10774 10784 10636",17,"Custom Attributes Scenario 2: Write badly cased attributes. Remove most of whitelist. (#10385)

* Allow custom attributes. Add flag to toggle custom attribute behavior

* Update custom attribute logic

- Only allow string attributes
- Remove custom attribute feature flag
- Add additional tests for data, aria, and custom attributes

* Allow numbers and booleans custom attributes. Cut isCustomAttribute

* Cover objects with custom attributes in warning test

* Rename DOMProperty.isWriteable to shouldSetAttribute

* Rework conditions in shouldSetProperty to avoid edge cases

* Update unknown property warning to include custom attribute information

* Remove ref and key from reserved props

* Ensure SSR test coverage for DOMProperty injections

* Add ajaxify attribute for internal FB support

* Ajaxify is a stringifiable object attribute

* Remove non-case sensitive standard attributes. Make ARIA hook dev only.

* Update test name for custom attributes on custom elements

* Remove SSR custom injection test

* Remove case sensitive props

* Remove onAfterResetModules hooks in SSR render tests

* Add back a few attributes and explain why they are needed

* Remove possibleStandardNames from DOMProperty.js

* Fix typo in HTMLPropertyConfig comment

* Remove duplicative comment

* Add back loop boolean property

* Do not allow assignment of attributes that are aliased

* Update custom attribute test to check value, not just presence

* Address case where class is assigned as an attribute on custom elements. Improve SSR tests

* Cover cases where className and for are given to custom elements

* Remove unnecessary spys on console.error. Reduce extra space in tests

* Cover cased custom attributes in SSR tests

* Custom attributes are case sensitive

* Allow uppercase letters in custom attributes. Address associated edge cases

* Allow improperly cased aliased attributes. Add additional tests

* Handle special properties like onFocusOut

* Add some comments to document where casing matters. Remove DOMPropertyNames

* Fix spelling mistake in ajaxify HTML property comment

* Make ARIA enforcement dev-only

* Remove alias test that covers multiple aliases for one property

* Fix typo in comment

* Build SVG aliases dynamically

* Remove unused DOMPropertyNames reference

* Do not translate bad casings of aliased attributes

- classname writes to the DOM as classname
- class does not write to the DOM
- cLASS does not write to the DOM
- arabic-form does not write to the DOM

* Revise the way custom booleans are treated

- Custom attributes can not have boolean values unless they are aria
  or data attributes
- Attributes with boolean values have been added back to the whitelist
- Warnings now exclude booleans from supported types
- Associated test coverage

* Add developer warnings for NaN and ARIA hooks

* Use string comparison instead of regex to check for data and aria attributes.

* Warn about unsupported properties without case sensitivity

* Remove attributes that are updated to invalid values

* Support object property values with toString methods. Allow boolean props to coerce objects

* Add back ajaxify test

* Address bad references in ReactDOMComponent-test. Format.

* Revert changes to the docs

We'll update them separately

* Allow all objects and pass incorrect aliases
",3442
"https://github.com/apache/airflow.git",30870,f732fc677b7f3f14ad7809a736d06705e4742347,742,1390,"30873",1,1501516754,1501516754,"10632 10641 10924 10911 10840 10943",6,"fix renderToString fails with array type children when react-dom/server render (#10221)

* fix(*): fix renderToString fails with array type children when react-dom/server render

* Add an integration test that verify renderToString with array type children

* Add integration test to renderToString with array type child

* Update integration test to renderToString with array type child

* fix renderToString fails with array type children when react-dom/server render

* Update integration test to renderToString with array type child

* Add to iterate that are not arrays

* Add the validation react element

* Improve an integration test of server renderToString with array type

* prettier

* prettier

* Make SSR can handle a single array element and nested array

* prettier

* Change integeration test description

* 	modified:   src/renderers/dom/ReactDOMNodeStreamRenderer.js

* Make invariants consistent

* Gate outdated test itself by feature flag

* Change test to make sense both with old and new code

* Test more cases
",1073
"https://github.com/apache/airflow.git",31276,824d22c9d986bca1571350facd560f67d7b18e5a,117,953,"31278",1,1495732486,1495732486,"7443 7112 9389 7144",4,"Prevent fiber from leaking into RN stack renderer (#9775)

Since stripEnvVariables was used to replace __DEV__ references, I assumed it (and other plugins) we run before requires statements were processed. Obviously I was wrong 😬 and as a result, the RN Stack and Fiber builds were way too large. This is an attempt to mimic the approach taken with DOM renderer and stub out modules that we explicitly don't want to include.

The alternative to this would have been to fork findNodeHandle, NativeMethodsMixin, ReactNativeBaseComponent, etc. and essentially avoid using the feature flag. That didn't seem tenable. The previous injection approach also doesn't work here because the circular references it resulted in caused Rollup to choke when creating the modules.",769
"https://github.com/apache/airflow.git",31319,bec0f736df8defaf9b720619e0934c8d61515f47,117,1175,"31320",1,1494505924,1494505924,"10762",1,"Wrap fiber-only test in feature flag (#9665)

**what is the change?:**
A test was added for a change to Fiber's behavior in #9608, and because of a
bug in our CirclCI script it landed when failing for non-fiber runs of the
tests.

This just wraps the test in a feature flag because it seems clear it was
only intended to test the new fiber behavior.

Thanks to @gaearon for pairing on this! :)

**why make this change?:**
So that tests are passing on master.

**test plan:**
`npm run test ReactCompositeComponentState`

**issue:**
None - figured it out before anyone opened an issue afaik.",606
"https://github.com/apache/airflow.git",31612,4b2eac3de7e1dbf5c2dd742fd9989974a83972cb,117,752,"31613",1,1491407249,1491407249,"12178 10981 9508 11750 10673 12175 10734 7252 11728 9371 10978 12143 8543 10729 7541 9341 12176 7202 11714 12135 12180 12155 11757 7482 12121 11722 11724 12167 12093 9881 11847 9543 12137 10245 9582 10256 11970 10819 9880 12142 12107 10977 12097 9522 12115 12130 12162 8183 12103 7266 11747 11763 12127 10247 12146 12160 12117 7112 12141 12150 8169 10177 10134 10135 12128 12105 12163 9746 10227 9579 12123 12129 11756 12053 12165 9346 12126 131 10971 10248 9762 12109 12173 11838 11752 11726 10983 10972 12164 11760 7856 9542 7268 12172 12166 7253 11718 10199 7144 10970 471 11720 12112 12131 7204 12116 12152 11808 12095 1329 11797 8182 10133 9527 12124 11719 10959 11727 12113 9859 12118 9702 11705 8633 9705 12114 7262 12156 11745 11809 12159 11764 8647 12154 8537 12174 9652 12101 11746 8512 10246 10215 11789 9373 12132 10647 8421 312 8173 10976 9655 12157 12122 10863 8433 12168 10709 11729 12147 12100 9761 7095 12151 12111 10593 10975 10982 10707 10194 11710 12059 71 10252 10968 9389 8432 12106 7203 1128 10151 12098 10969 12171 9909 9510 9581 11807 10858 12153 12181 10131 12138 12094 11749 10832 8608 11751 7346 10731 12133 9769 9903 12108 9668 11754 12179 25 9519 9439 8179 10158 11735 8411 12139 9918 11717 12058 9672 12158 10193 11725 9343 7087 12110 11565 8181 10712 11765 11762 12177 12144 8409 12136 12119 11849 11755 11716 11758 12145 8655 11761 12140 11748 10198 11744 7267 8426 12148 9549 10979 12169 12170 7443 12057 12161 11848 12120 11759 10705 12104 11753 8620 8415 12134 11715 12125 12099 9544 9509 12149 9580 12102",177,"Convert current build system to Rollup and adopt flat bundles (#9327)

* WIP

* fbjs support

* WIP

* dev/prod mode WIP

* More WIP

* builds a cjs bundle

* adding forwarding modules

* more progress on forwarding modules and FB config

* improved how certain modules get inlined for fb and cjs

* more forwarding modules

* added comments to the module aliasing code

* made ReactPerf and ReactTestUtils bundle again

* Use -core suffix for all bundles

This makes it easier to override things in www.

* Add a lazy shim for ReactPerf

This prevents a circular dependency between ReactGKJSModule and ReactDOM

* Fix forwarding module for ReactCurrentOwner

* Revert ""Add a lazy shim for ReactPerf""

This reverts commit 723b402c07116a70ce8ff1e43a1f4d92052e8f43.

* Rename -core suffix to -fb for clarity

* Change forwarding modules to import from -fb

This is another, more direct fix for ReactPerf circular dependency

* should fix fb and cjs bundles for ReactCurrentOwner

* added provides module for ReactCurrentOwner

* should improve console output

* fixed typo with argument passing on functon call

* Revert ""should improve console output""

This breaks the FB bundles.

This reverts commit 65f11ee64f678c387cb3cfef9a8b28b89a6272b9.

* Work around internal FB transform require() issue

* moved  ReactInstanceMap out of React and into ReactDOM and ReactDOMFiber

* Expose more internal modules to www

* Add missing modules to Stack ReactDOM to fix UFI

* Fix onlyChild module

* improved the build tool

* Add a rollup npm script

* Rename ReactDOM-fb to ReactDOMStack-fb

* Fix circular dependencies now that ReactDOM-fb is a GK switch

* Revert ""Work around internal FB transform require() issue""

This reverts commit 0a50b6a90bffc59f8f5416ef36000b5e3a44d253.

* Bump rollup-plugin-commonjs to include a fix for rollup/rollup-plugin-commonjs#176

* Add more forwarding modules that are used on www

* Add even more forwarding modules that are used on www

* Add DOMProperty to hidden exports

* Externalize feature flags

This lets www specify them dynamically.

* Remove forwarding modules with implementations

Instead I'm adding them to react-fb in my diff.

* Add all injection necessary for error logging

* Add missing forwarding module (oops)

* Add ReactART builds

* Add ReactDOMServer bundle

* Fix UMD build of ReactDOMFiber

* Work in progress: start adding ReactNative bundle

* tidied up the options for bundles, so they can define what types they output and exclude

* Add a working RN build

* further improved and tidied up build process

* improved how bundles are built by exposing externals and making the process less ""magical"", also tidied up code and added more comments

* better handling of bundling ReactCurrentOwner and accessing it from renderer modules

* added NODE_DEV and NODE_PROD

* added NPM package creation and copying into build chain

* Improved UMD bundles, added better fixture testing and doc plus prod builds

* updated internal modules (WIP)

* removed all react/lib/* dependencies from appearing in bundles created on build

* added react-test-renderer bundles

* renamed bundles and paths

* fixed fixture path changes

* added extract-errors support

* added extractErrors warning

* moved shims to shims directory in rollup scripts

* changed pathing to use build rather than build/rollup

* updated release doc to reflect some rollup changes

* Updated ReactNative findNodeHandle() to handle number case (#9238)

* Add dynamic injection to ReactErrorUtils (#9246)

* Fix ReactErrorUtils injection (#9247)

* Fix Haste name

* Move files around

* More descriptive filenames

* Add missing ReactErrorUtils shim

* Tweak reactComponentExpect to make it standalone-ish in www

* Unflowify shims

* facebook-www shims now get copied over correctly to build

* removed unnecessary resolve

* building facebook-www/build is now all sync to prevent IO issues plus handles extra facebook-www src assets

* removed react-native-renderer package and made build make a react-native build dir instead

* 😭😭😭

* Add more SSR unit tests for elements and children. (#9221)

* Adding more SSR unit tests for elements and children.

* Some of my SSR tests were testing for react-text and react-empty elements that no longer exist in Fiber. Fixed the tests so that they expect correct markup in Fiber.

* Tweaked some test names after @gaearon review comment https://github.com/facebook/react/pull/9221#discussion_r107045673 . Also realized that one of the tests was essentially a direct copy of another, so deleted it.

* Responding to code review https://github.com/facebook/react/pull/9221#pullrequestreview-28996315 . Thanks @spicyj!

* ReactElementValidator uses temporary ReactNative View propTypes getter (#9256)

* Updating packages for 16.0.0-alpha.6 release

* Revert ""😭😭😭""

This reverts commit 7dba33b2cfc67246881f6d57633a80e628ea05ec.

* Work around Jest issue with CurrentOwner shared state in www

* updated error codes

* splits FB into FB_DEV and FB_PROD

* Remove deps on specific builds from shims

* should no longer mangle FB_PROD output

* Added init() dev block to ReactTestUtils

* added shims for DEV only code so it does not get included in prod bundles

* added a __DEV__ wrapping code to FB_DEV

* added __DEV__ flag behind a footer/header

* Use right haste names

* keeps comments in prod

* added external babel helpers plugin

* fixed fixtures and updated cjs/umd paths

* Fixes Jest so it run tests correctly

* fixed an issue with stubbed modules not properly being replaced due to greedy replacement

* added a WIP solution for ReactCurrentOwner on FB DEV

* adds a FB_TEST bundle

* allows both ReactCurrentOwner and react/lib/ReactCurrentOwner

* adds -test to provides module name

* Remove TEST env

* Ensure requires stay at the top

* added basic mangle support (disbaled by default)

* per bundle property mangling added

* moved around plugin order to try and fix deadcode requires as per https://github.com/rollup/rollup/issues/855

* Fix flow issues

* removed gulp and grunt and moved tasks to standalone node script

* configured circleci to use new paths

* Fix lint

* removed gulp-extract-errors

* added test_build.sh back in

* added missing newline to flow.js

* fixed test coverage command

* changed permissions on test_build.sh

* fixed test_html_generations.sh

* temp removed html render test

* removed the warning output from test_build, the build should do this instead

* fixed test_build

* fixed broken npm script

* Remove unused ViewportMetrics shim

* better error output

* updated circleci to node 7 for async/await

* Fixes

* removed coverage test from circleci run

* circleci run tets

* removed build from circlci

* made a dedicated jest script in a new process

* moved order around of circlci tasks

* changing path to jest in more circleci tests

* re-enabled code coverage

* Add file header to prod bundles

* Remove react-dom/server.js (WIP: decide on the plan)

* Only UMD bundles need version header

* Merge with master

* disabled const evaluation by uglify for <script></script> string literal

* deal with ART modules for UMD bundles

* improved how bundle output gets printed

* fixed filesize difference reporting

* added filesize dep

* Update yarn lockfile for some reason

* now compares against the last run branch built on

* added react-dom-server

* removed un-needed comment

* results only get saved on full builds

* moved the rollup sized plugin into a plugins directory

* added a missing commonjs()

* fixed missing ignore

* Hack around to fix RN bundle

* Partially fix RN bundles

* added react-art bundle and a fixture for it

* Point UMD bundle to Fiber and add EventPluginHub to exported internals

* Make it build on Node 4

* fixed eslint error with resolve being defined in outer scope

* Tweak how build results are calculated and stored

* Tweak fixtures build to work on Node 4

* Include LICENSE/PATENTS and fix up package.json files

* Add Node bundle for react-test-renderer

* Revert ""Hack around to fix RN bundle""

We'll do this later.

This reverts commit 59445a625962d7be4c7c3e98defc8a31f8761ec1.

* Revert more RN changes

We'll do them separately later

* Revert more unintentional changes

* Revert changes to error codes

* Add accidentally deleted RN externals

* added RN_DEV/RN_PROD bundles

* fixed typo where RN_DEV and RN_PROD were the wrong way around

* Delete/ignore fixture build outputs

* Format scripts/ with Prettier

* tidied up the Rollup build process and split functions into various different files to improve readability

* Copy folder before files

* updated yarn.lock

* updated results and yarn dependencies to the latest versions
",9114
"https://github.com/apache/airflow.git",31940,13e05b4237819c028515d6dedec9c2d21324a198,742,1039,"31942",1,1486656059,1486656059,"11697 11790 10199",3,"Use separate feature flag for ReactTestRenderer (#8965)

The ReactDOMFeatureFlags is not reachable from the npm package since it is
in a separate build so we need a separate one.",179
"https://github.com/apache/airflow.git",32115,d28ac9eea0cad6be949cc9d3f973cf548e89bf97,117,1126,"46403 46404",2,1484257952,1484257952,"10875 12193 12200 12201 12192 11279 11535 10635 11602 10167 10193 12224 12334 10777 10971 10168 12226 12187 12188 10803 10703 10942 11633",23,"Merge pull request #8757 from acdlite/fiberfeatureflag

Add feature flag to disable Fiber-only features",103
"https://github.com/apache/airflow.git",32388,6301086c354e5c296ed16f1feb9d7eae03444049,1107,1107,"32391",1,1481312671,1481821932,"10932 10815 10747",3,"Schedule callback effects while merging updates

This allows us to remove the hasCallback flag.
",96
"https://github.com/apache/airflow.git",32488,16bf42902926dd401206d8cff5ad61c0d7d49c96,117,1397,"32489",1,1480404965,1480404965,"10168 10601 10167 10606 12042",5,"Fix fiber feature flag for ReactDOMProduction-test (#8451)

",60
"https://github.com/apache/airflow.git",32604,9334b771c27eee3dcfb0634599727bfa57b5818e,742,1590,"32605",1,1479773833,1479773833,"10900",1,"Change test assertion depending on a feature flag (#8306)

Instead of a private API (see https://github.com/facebook/react/pull/8150#discussion_r88280994)",154
"https://github.com/apache/airflow.git",32856,8d3a58de621f69b8c5b3ea1eba2dcc70bd7d7a1a,1039,760,"32857",1,1473733705,1476735450,"11770",1,"Silence Fiber warning when the feature flag is on

When the feature flag is on, we should silence the warning since
we're explicitly testing it. This is needed when running unit
tests with the flag on.
",202
"https://github.com/apache/airflow.git",33192,c06a68a10b8c43922acff58dcad803412954bca0,117,1039,"33195",1,1470876276,1470876276,"10198 10950 11769 10199",4,"Mock ReactDOM for Fiber Tests (#7206)

We currently write all our tests against the DOM implementation.
I need a way to run the Fiber tests against it. But I don't want
to take on any package dependencies on Fiber modules yet.

There's a problem with jest right now where you can't globally
mock modules that already exist. So I have to add a global call
to jest.mock.

Luckily we already have a way to test the useCreateElement paths
using a feature flag. I won't activate this flag in travis until
it passes, but the idea is to run all three variants in travis.

I'm not sure that invoking rAF and rIC synchronously is the best
way to test this since it doesn't capture the backwards
compatibility aspect. I.e. the fact that people might be relying
on the synchronous nature in real apps too. It's a start.

Ideally, jest would have these built-in.",867
"https://github.com/apache/airflow.git",41386,cfd6f7a1b8bdbe263ec9a8076ee549171fcb9534,1513,1513,"41229",1,1439351553,1439945060,"12521 10950 12886 11972 12558 12548 12507 12575 12468 12551 12543 12560 12472 12920 12974 12524 10848 10881 12953",19,"Use createElement instead of HTML generation

Behind a feature flag. This is a relatively simple change; adopting this strategy universally would mean that we could clean up a lot of code but this doesn't attempt to restructure more than necessary.
",249
"https://github.com/apache/airflow.git",46406,397810f844661288b22de4cf645999195993d51e,1107,1107,"46407",1,1484186896,1484257875,"10605 10875",2,"Top-level render only accepts a React element if feature flag is on
",68
"https://github.com/apache/airflow.git",46409,86280187d7b9a0708e9268d4a17aa7c32f414da0,1107,1107,"46410",1,1484185766,1484186496,"10803 10875",2,"Disallow Fiber-only render return types when feature flag is on

Except for portals, which we use in some places.
",114
"https://github.com/apache/airflow.git",46410,bf117f82e1acb4e20a0fd844f3494233cb1fb907,1107,1107,"46411",1,1484185273,1484185273,"10777",1,"Add feature flag to disable Fiber-specific features

We'll enable this in www in case we need to roll back to Stack.
",117
"https://github.com/apache/airflow.git",46514,d79c6ab995cc28868fd44ae46a792d624cb73edc,117,1397,"46515",1,1488846103,1488846103,"11770 10950 10792",3,"Fiber DOM async feature flag (#9127)

D4662171",46
